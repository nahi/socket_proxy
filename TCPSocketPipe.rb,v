head	1.3;
access;
symbols;
locks
	nakahiro:1.3; strict;
comment	@# @;


1.3
date	99.05.14.03.02.00;	author nakahiro;	state Exp;
branches;
next	1.2;

1.2
date	99.05.13.13.38.47;	author nakahiro;	state Exp;
branches;
next	1.1;

1.1
date	99.05.13.13.11.34;	author nakahiro;	state Exp;
branches;
next	;


desc
@Creates I/O pipes for TCP socket tunneling.
@


1.3
log
@Several logging bugs were fixed.
@
text
@#!/usr/bin/env ruby

RCS_ID = %q$Id: TCPSocketPipe.rb,v,v 1.1 1999/07/03 06:15:56 nakahiro Exp $

require 'thread'
require 'socket'
require 'getopts'
require 'KNLog.rb'

class TCPSocketPipe
  include Socket::Constants

  Timeout = 100			# [sec]
  ReadBlockSize = 10 * 1024	# [byte]

  class SessionPool
    class Session
      attr( :server )
      attr( :client )
      def initialize( server = nil, client = nil )
      	@@server = server
      	@@client = client
      end
    end

    def initialize()
      @@array = []
    end

    def each()
      @@array.each do |i|
	yield i
      end
    end

    def add( serverSock, clientSock )
      @@array.push( Session.new( serverSock, clientSock ))
    end

    def del( sockPair )
      @@array.delete_if do |i|
        sockPair.equal?( i )
      end
    end
  end

  def initialize( srcPort, destName, destPort, log, options )
    @@srcPort = srcPort.to_i or raise ArgumentError()
    @@destName = destName or raise ArgumentError()
    @@destPort = destPort.to_i or raise ArgumentError()
    @@log = log
    @@options = options
    @@sessionPool = SessionPool.new()
    begin
      @@waitSock = TCPserver.new( @@srcPort )
      @@log.add( KNLog::SEV_INFO,
      	'Started ... SrcPort=%s, DestName=%s, DestPort=%s' %
      	[ @@srcPort, @@destName, @@destPort ], self.type )
      run()
    rescue
      @@log.add( KNLog::SEV_WARN,
      	"Detected an exception. Stopping ... #{$!}\n" << $@@.join( "\n" ),
	self.type )
    ensure
      @@waitSock.close() if @@waitSock
      @@log.add( KNLog::SEV_INFO,
      	'Stopped ... SrcPort=%s, DestName=%s, DestPort=%s' %
      	[ @@srcPort, @@destName, @@destPort ], self.type )
      @@log.close()
    end
  end

  def run()
    while true
      readWait = []
      @@sessionPool.each do |session|
	readWait.push( session.server ).push( session.client )
      end
      readWait.unshift( @@waitSock )
      readReady, writeReady, except = IO.select( readWait, nil, nil, Timeout )
      next unless readReady
      readReady.each do |sock|
	if ( @@waitSock.equal?( sock ))
	  newSock = @@waitSock.accept
	  addSession( newSock )
	  @@log.add( KNLog::SEV_INFO, "Accepted ... from " <<
	    newSock.peeraddr[2], 'run' )
	else
	  @@sessionPool.each do |session|
	    transfer( session, true ) if ( sock.equal?( session.server ))
	    transfer( session, false ) if ( sock.equal?( session.client ))
	  end
	end
      end
    end
  end

  def transfer( session, bServer )
    readSock = writeSock = nil
    if ( bServer )
      readSock = session.server
      writeSock = session.client
    else
      readSock = session.client
      writeSock = session.server
    end

    readBuf = ''
    begin
      readBuf << readSock.sysread( ReadBlockSize )
    rescue EOFError
      closeSession( session )
      return
    rescue Errno::ECONNRESET
      closeSession( session )
      @@log.add( KNLog::SEV_INFO, "#{$!} while reading.", 'transfer' )
      return
    rescue
      closeSession( session )
      @@log.add( KNLog::SEV_WARN,
	"Detected an exception. Stopping ... #{$!}\n" << $@@.join( "\n" ),
	'transfer' )
      return
    end

    if ( bServer )
      @@log.add( KNLog::SEV_INFO, 'Transfer data from source to destination...',
	'transfer' )
    else
      @@log.add( KNLog::SEV_INFO, 'Transfer data from destination to source...',
	'transfer' )
    end

    dumpData( readBuf ) if ( bServer or @@options[0] )

    writeSize = 0
    while ( writeSize < readBuf.size )
      begin
      	writeSize += writeSock.syswrite( readBuf[writeSize..-1] )
      rescue Errno::ECONNRESET
      	closeSession( session )
      	@@log.add( KNLog::SEV_INFO, "#{$!} while writing.", 'transfer' )
      	return
      rescue
	closeSession( session )
      	@@log.add( KNLog::SEV_WARN,
	  "Detected an exception. Stopping ... #{$!}\n" << $@@.join( "\n" ),
	  'transfer' )
	return
      end
    end
  end

  def dumpData( data )
    hexDump = @@options[1].to_i
    dumpStr = "Transferred data...\n"
    if ( hexDump )
      charInLine = if ( hexDump == 0 ) then 16 else hexDump end
      lineBuf = ''
      0.upto( data.size - 1 ) do |i|
	lineBuf <<
	  if (( data[i] >= 0x20 ) and ( data[i] <= 0x7f ))
	    data[i, 1]
	  else
	    '.'
	  end
	dumpStr << '%02x ' % ( 0xff & data[i] )
	if ( i % charInLine == ( charInLine - 1 ))
	  dumpStr << "  #{lineBuf}\n" 
	  lineBuf = ''
	end
      end
      dumpStr << "  #{lineBuf}\n"
    else
      dumpStr = data
    end
    @@log.add( KNLog::SEV_INFO, dumpStr, 'dumpData' )
  end

  def addSession( serverSock )
    begin
      clientSock = TCPsocket.new( @@destName, @@destPort )
    rescue
      @@log.add( KNLog::SEV_ERROR, 'Create client socket failed.', 'addSession' )
      return
    end
    @@sessionPool.add( serverSock, clientSock )
  end

  def closeSession( session )
    session.server.close()
    session.client.close()
    @@sessionPool.del( session )
  end
end

def main()
  getopts( 'd', 'x:' )
  srcPort = ARGV.shift
  destName = ARGV.shift
  destPort = ARGV.shift
  usage() if ( !srcPort or !destName or !destPort )
  log = KNLog.new( STDERR )
#  log = KNLog.new( 'TCPSocketPipe.log', 0 )	# 0 means 'no shifting'
  ap = TCPSocketPipe.new( srcPort, destName, destPort, log, [ $OPT_d, $OPT_x ])
end

def usage()
  STDERR.print <<EOM
Usage: #{$0} srcPort destName destPort

    Creates I/O pipes for TCP socket tunneling.

    srcPort .... port# of a source(on your machine).
    destName ... machine name of a destination(name or ip-addr).
    destPort ... port# of a destination.

    -d ......... dumps data from destination port(not dumped by default).
    -x [num] ... hex dump. formatted num chars in each line.

#{RCS_ID}
EOM
  exit 1
end

main() if ( $0 == __FILE__ )
@


1.2
log
@Option parsing bug fixed.
@
text
@d3 1
a3 1
RCS_ID = %q$Id: TCPSocketPipe.rb,v,v 1.1 1999/07/03 06:15:56 nakahiro Exp $
a12 1
  ListenBackLog = 5		# [item]
d60 4
d65 1
a65 1
      @@waitSock.close()
d69 1
d114 4
d120 3
a122 1
      @@log.add( KNLog::SEV_WARN, $! )
d140 4
a144 1
      	@@log.add( KNLog::SEV_WARN, $! )
d146 3
d204 1
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
RCS_ID = %q$Id: TCPSocketPipe.rb,v,v 1.1 1999/07/03 06:15:56 nakahiro Exp $
d182 1
a185 1
  getopts( 'd', 'x:' )
@
